@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Core;
@using Chinook.Models
@using Chinook.ClientModels
@using Chinook.Services.Interface;
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(async () => await UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(async () => await FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(async () => await OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    [Parameter] public long ArtistId { get; set; }
    [Inject] IPlaylistService Service { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    private Modal PlaylistDialog { get; set; }

    private List<Chinook.ClientModels.Playlist> Playlist;

    private Artist Artist;
    private List<PlaylistTrack> Tracks;
    private DbContext DbContext;
    private PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string CurrentUserId;

    [Parameter] public long? PlayListId { get; set; }
    [Parameter] public string? PlayListName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();
        var DbContext = await DbFactory.CreateDbContextAsync();

        Artist = DbContext.Artists.SingleOrDefault(a => a.ArtistId == ArtistId);
        await GetTrackInfo();
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async Task FavoriteTrack(long trackId)
    {
        CloseInfoMessage();
        if (await Service.AddTrackToPlaylistId(trackId, Constant.PlaylistId, null))
        {
            var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
            InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
            await GetTrackInfo();
        }
    }

    private async Task UnfavoriteTrack(long trackId)
    {
        CloseInfoMessage();
        if (await Service.RemoveTrackFromPlaylist(trackId, Constant.PlaylistId))
        {
            var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
            InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
            await GetTrackInfo();
        }
    }

    private async Task OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        Playlist = await Service.GetAllAsync(CurrentUserId);
        PlayListId = Playlist.FirstOrDefault()?.PlaylistId ?? 0;
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private async Task AddTrackToPlaylist()
    {
        CloseInfoMessage();
        if (await Service.AddTrackToPlaylistId(SelectedTrack.TrackId, PlayListId, PlayListName))
        {
            var play = Playlist.FirstOrDefault(p => p.PlaylistId == PlayListId);
            InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack?.TrackName} added to playlist {PlayListName ?? play?.Name}.";
            PlaylistDialog.Close();
        }
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

    private async Task GetTrackInfo()
    {
        var DbContext = await DbFactory.CreateDbContextAsync();

        Tracks = DbContext.Tracks.Where(a => a.Album.ArtistId == ArtistId)
            .Include(a => a.Album)
            .Include(a => a.Playlists).ThenInclude(p => p.UserPlaylists)
            .Select(t => new PlaylistTrack()
                {
                    AlbumTitle = (t.Album == null ? "-" : t.Album.Title),
                    TrackId = t.TrackId,
                    TrackName = t.Name,
                    IsFavorite = t.Playlists.Where(p => p.UserPlaylists.Any(up => up.UserId == CurrentUserId && up.Playlist.Name.Equals(Constant.MyFavTracks))).Any()
                })
            .ToList();
    }
}

<Modal @ref="PlaylistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @bind="@PlayListId">
                @if (Playlist != null)
                {
                    @foreach (var play in Playlist)
                    {
                        <option value="@(play.PlaylistId)">@play.Name</option>
                    }
                }
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist" @bind="@PlayListName">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>
